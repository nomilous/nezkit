// Generated by CoffeeScript 1.4.0
var GitSeed, colors, fs, sequence;

fs = require('fs');

console.log('remove colors');

colors = require('colors');

sequence = require('when/sequence');

GitSeed = (function() {

  GitSeed.init = function(root, Plugin, deferral) {
    return Plugin.Package.search(root, Plugin, deferral, function(error, packages) {
      var tree;
      tree = new GitSeed(root, Plugin, deferral, packages);
      return tree.save();
    });
  };

  function GitSeed(root, Plugin, deferral, array) {
    var repo, _i, _len;
    this.root = root;
    this.deferral = deferral;
    if (typeof this.deferral.resolve !== 'function' || typeof this.deferral.reject !== 'function' || typeof this.deferral.notify !== 'function') {
      throw new Error("" + this.constructor.name + " requires deferral");
    }
    this.control = "" + this.root + "/.git-seed";
    if (array instanceof Array) {
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        repo = array[_i];
        if (repo.root) {
          repo.ref = 'ROOT_REPO_REF';
        }
      }
      this.array = array;
    } else if (typeof array === 'undefined') {
      this.array = this.load(Plugin);
    }
  }

  GitSeed.prototype.save = function() {
    try {
      fs.writeFileSync(this.control, JSON.stringify(this.array, null, 2));
      return console.log('(write)'.green, this.control);
    } catch (error) {
      console.log(error.red);
      throw error;
    }
  };

  GitSeed.prototype.load = function(Plugin) {
    var array, json, properties, _i, _len;
    try {
      if (!fs.lstatSync(this.control).isFile()) {
        throw '';
      }
    } catch (error) {
      throw "explected control file: " + this.control;
    }
    try {
      json = JSON.parse(fs.readFileSync(this.control));
      array = [];
      for (_i = 0, _len = json.length; _i < _len; _i++) {
        properties = json[_i];
        array.push(new Plugin.Package(properties));
      }
      return array;
    } catch (error) {
      throw "error loading control file: " + this.control + " " + (error.toString());
    }
  };

  GitSeed.prototype.status = function() {
    var repo, _i, _len, _ref, _results;
    _ref = this.array;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      _results.push(repo.getStatus(this.deferral));
    }
    return _results;
  };

  GitSeed.prototype.clone = function(callback) {
    var cloneAll, error, repo, success, targets, _i, _len, _ref;
    cloneAll = [];
    targets = [];
    _ref = this.array;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      targets.push(repo);
      cloneAll.push(function() {
        return targets.pop().clone();
      });
    }
    return sequence(cloneAll).then(success = function() {}, error = function() {});
  };

  return GitSeed;

})();

module.exports = GitSeed;
