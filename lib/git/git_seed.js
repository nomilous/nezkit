// Generated by CoffeeScript 1.4.0
var GitSeed, fs, nodefn, sequence;

fs = require('fs');

sequence = require('when/sequence');

nodefn = require('when/node/function');

GitSeed = (function() {

  GitSeed.init = function(root, Plugin, superTask) {
    return Plugin.Package.search(root, Plugin, superTask, function(error, packages) {
      var tree;
      tree = new GitSeed(root, Plugin, superTask, packages);
      return tree.save();
    });
  };

  function GitSeed(root, Plugin, superTask, array) {
    var repo, _i, _len;
    this.root = root;
    this.Plugin = Plugin;
    this.superTask = superTask;
    if (typeof this.superTask.resolve !== 'function' || typeof this.superTask.reject !== 'function' || typeof this.superTask.notify !== 'function') {
      throw new Error("" + this.constructor.name + " requires superTask as deferral");
    }
    this.control = "" + this.root + "/.git-seed";
    if (array instanceof Array) {
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        repo = array[_i];
        if (repo.root) {
          repo.ref = 'ROOT_REPO_REF';
        }
      }
      this.array = array;
    } else if (typeof array === 'undefined') {
      this.array = this.load(Plugin);
    }
  }

  GitSeed.prototype.save = function() {
    try {
      fs.writeFileSync(this.control, JSON.stringify(this.array, null, 2));
      return this.superTask.notify.event.good('seed update', this.control);
    } catch (error) {
      this.superTask.notify.info.bad('seed update failed', error.toString());
      throw error;
    }
  };

  GitSeed.prototype.load = function(Plugin) {
    var array, json, properties, _i, _len;
    try {
      if (!fs.lstatSync(this.control).isFile()) {
        throw '';
      }
    } catch (error) {
      throw "expected control file: " + this.control;
    }
    try {
      json = JSON.parse(fs.readFileSync(this.control));
      array = [];
      for (_i = 0, _len = json.length; _i < _len; _i++) {
        properties = json[_i];
        array.push(new Plugin.Package(properties));
      }
      return array;
    } catch (error) {
      throw "error loading control file: " + this.control + " " + (error.toString());
    }
  };

  GitSeed.prototype.status = function(callback) {
    return GitSeed.action('status', this.Plugin.Package, this.array, this.superTask, callback);
  };

  GitSeed.prototype.clone = function(callback) {};

  GitSeed.action = function(action, Repo, repoArray, superTask, callback) {
    var event, fail, info, repo, succeed, targs;
    event = superTask.notify.event;
    info = superTask.notify.info;
    succeed = function(results) {
      switch (action) {
        case 'clone':
          event.good("seed " + action, 'success');
          break;
        default:
          info.good("seed " + action, 'success');
      }
      info.good("seed " + action + " results", {
        results: results
      });
      return callback(null, results);
    };
    fail = function(error) {
      switch (action) {
        case 'clone':
          event.bad("seed " + action, 'failed');
          break;
        default:
          info.bad("seed " + action, 'failed');
      }
      info.bad("seed " + action + " error", {
        error: error
      });
      return callback(error);
    };
    targs = [];
    return sequence((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = repoArray.length; _i < _len; _i++) {
        repo = repoArray[_i];
        targs.unshift(repo);
        _results.push(function() {
          return nodefn.call(Repo[action], targs.pop(), superTask);
        });
      }
      return _results;
    })()).then(succeed, fail);
  };

  return GitSeed;

})();

module.exports = GitSeed;
