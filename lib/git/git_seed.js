// Generated by CoffeeScript 1.4.0
var GitSeed, colors, fs, series;

fs = require('fs');

colors = require('colors');

series = require('../set/set').series;

GitSeed = (function() {

  GitSeed.init = function(root, Plugin) {
    return Plugin.Package.search(root, Plugin, function(error, packages) {
      var tree;
      tree = new GitSeed(root, Plugin, packages);
      return tree.save();
    });
  };

  function GitSeed(root, Plugin, list) {
    this.root = root;
    this.control = "" + this.root + "/.git-seed";
    if (list instanceof Array) {
      this.array = list;
    } else if (typeof list === 'undefined') {
      this.array = this.load(Plugin);
    }
  }

  GitSeed.prototype.save = function() {
    try {
      fs.writeFileSync(this.control, JSON.stringify(this.array, null, 2));
      return console.log('(write)'.green, this.control);
    } catch (error) {
      console.log(error.red);
      throw error;
    }
  };

  GitSeed.prototype.load = function(Plugin) {
    var array, json, properties, _i, _len;
    try {
      if (!fs.lstatSync(this.control).isFile()) {
        throw '';
      }
    } catch (error) {
      throw "explected control file: " + this.control;
    }
    try {
      json = JSON.parse(fs.readFileSync(this.control));
      array = [];
      for (_i = 0, _len = json.length; _i < _len; _i++) {
        properties = json[_i];
        array.push(new Plugin.Package(properties));
      }
      return array;
    } catch (error) {
      throw "error loading control file: " + this.control + " " + (error.toString());
    }
  };

  GitSeed.prototype.status = function() {
    var repo, _i, _len, _ref, _results;
    _ref = this.array;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      _results.push(repo.printStatus());
    }
    return _results;
  };

  GitSeed.prototype.clone = function(callback) {
    var _this = this;
    return series({
      targets: this.array,
      action: 'clone'
    }, function(error, result) {
      if (error) {
        callback(error, results);
        return;
      }
      return series({
        targets: _this.array,
        action: 'install'
      }, callback);
    });
  };

  GitSeed.prototype.commit = function(message, callback) {
    return series({
      targets: this.array,
      action: 'commit'
    }, [message], callback);
  };

  GitSeed.prototype.pull = function(gitSeed, callback) {
    var last, repo, targets, _i, _len, _ref,
      _this = this;
    if (!gitSeed) {
      this.array[0].pull(callback);
      return;
    }
    targets = [];
    last = gitSeed.array.length - 1;
    _ref = gitSeed.array.slice(1, +last + 1 || 9e9);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      targets.push(repo);
    }
    return series({
      targets: targets,
      action: 'pull'
    }, function(error, result) {
      if (error) {
        callback(error, results);
        return;
      }
      return series({
        targets: _this.array,
        action: 'install'
      }, callback);
    });
  };

  GitSeed.prototype.noControl = function(ex) {
    var error;
    throw error = ex || new Error('Expected control file, not this:' + this.control);
  };

  return GitSeed;

})();

module.exports = GitSeed;
