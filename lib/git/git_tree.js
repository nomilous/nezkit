// Generated by CoffeeScript 1.4.0
var GitRepo, GitTree, colors, fs, series;

fs = require('fs');

colors = require('colors');

GitRepo = require('./git_repo');

series = require('../set/set').series;

GitTree = (function() {

  GitTree.init = function(root) {
    var arrayOfGitWorkdirs, find, list;
    arrayOfGitWorkdirs = [];
    list = {};
    find = require('findit').find(root);
    find.on('directory', function(dir, stat) {
      var match;
      if (match = dir.match(/(.*)\/.git\//)) {
        if (typeof list[match[1]] !== 'undefined') {
          return;
        }
        console.log('(found)'.green, "" + match[1] + "/.git");
        list[match[1]] = 1;
        return arrayOfGitWorkdirs.push(match[1]);
      }
    });
    return find.on('end', function() {
      var path, repoArray, seq, tree, _i, _len;
      repoArray = [];
      seq = 0;
      for (_i = 0, _len = arrayOfGitWorkdirs.length; _i < _len; _i++) {
        path = arrayOfGitWorkdirs[_i];
        repoArray.push(GitRepo.init(path, seq++));
      }
      tree = new GitTree(root, repoArray);
      return tree.save();
    });
  };

  function GitTree(root, list) {
    this.root = root;
    this.control = "" + this.root + "/.git-seed";
    if (list instanceof Array) {
      this.array = list;
    } else if (typeof list === 'undefined') {
      this.array = this.load();
    }
  }

  GitTree.prototype.save = function() {
    try {
      fs.writeFileSync(this.control, JSON.stringify(this.array, null, 2));
      return console.log('(write)'.green, this.control);
    } catch (error) {
      console.log(error.red);
      throw error;
    }
  };

  GitTree.prototype.load = function() {
    var array, json, properties, _i, _len;
    try {
      if (!fs.lstatSync(this.control).isFile()) {
        throw '';
      }
    } catch (error) {
      require('./git_action').exitCode = 2;
      throw "explected control file: " + this.control;
    }
    try {
      json = JSON.parse(fs.readFileSync(this.control));
      array = [];
      for (_i = 0, _len = json.length; _i < _len; _i++) {
        properties = json[_i];
        array.push(new GitRepo(properties));
      }
      return array;
    } catch (error) {
      require('./git_action').exitCode = 3;
      throw "error loading control file: " + this.control + " " + (error.toString());
    }
  };

  GitTree.prototype.status = function() {
    var repo, _i, _len, _ref, _results;
    _ref = this.array;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      _results.push(repo.printStatus());
    }
    return _results;
  };

  GitTree.prototype.clone = function(callback) {
    return series({
      targets: this.array,
      action: 'clone'
    }, callback);
  };

  GitTree.prototype.commit = function(message, callback) {
    return series({
      targets: this.array,
      action: 'commit'
    }, [message], callback);
  };

  GitTree.prototype.noControl = function(ex) {
    var error;
    throw error = ex || new Error('Expected control file, not this:' + this.control);
  };

  return GitTree;

})();

module.exports = GitTree;
