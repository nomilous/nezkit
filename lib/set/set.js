// Generated by CoffeeScript 1.4.0
var set;

module.exports = set = {
  series: function(opts, callback) {
    var afterAll, afterEach, args, array, required, results, target, targets, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    if (opts == null) {
      opts = {};
    }
    _ref = ['targets', 'function'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      required = _ref[_i];
      if (typeof opts[required] === 'undefined') {
        throw new Error("undefined opts." + required + " in set.series(opts, callback)");
      }
    }
    _ref1 = ['targets', 'args'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      array = _ref1[_j];
      if (opts[array]) {
        if (!(opts[array] instanceof Array)) {
          throw new Error("opts." + array + " should be array in set.series(opts, callback)");
        }
      }
    }
    if (typeof callback !== 'function') {
      throw new Error("undefined callback in set.series(opts callback)");
    }
    return;
    targets = [];
    results = [];
    args = opts.args || [];
    afterEach = opts.afterEach || function() {};
    afterAll = callback;
    _ref2 = opts.targets;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      target = _ref2[_k];
      targets.push(target);
    }
    args.push(function(error, result) {
      if (typeof stepCallback === 'function') {
        stepCallback(error, result);
      }
      if (error) {
        finalCallback(error, results);
        return;
      }
      results.push(result);
      return set.recurse(results, targets, functionName, args, finalCallback);
    });
    return set.recurse(results, targets, functionName, args, finalCallback);
  },
  recurse: function(results, targets, fname, args, finalCallback) {
    var target;
    target = targets.shift();
    if (!target) {
      finalCallback(null, results);
      return;
    }
    return target[fname].apply(target, args);
  }
};
