// Generated by CoffeeScript 1.4.0
var injector, support;

support = require('./injector_support');

injector = {
  inject: function() {
    var fn, key, list;
    if (typeof arguments[0] === 'function') {
      fn = arguments[0];
      return fn.apply(null, injector.loadServices(support.fn2modules(fn)));
    } else {
      list = arguments[0];
      for (key in arguments) {
        fn = arguments[key];
      }
      return fn.apply(null, injector.loadServices(support.fn2modules(fn), list));
    }
  },
  loadServices: function(dynamic, preDefined) {
    var config, module, services, skip, _i, _len;
    skip = preDefined.length;
    services = preDefined;
    for (_i = 0, _len = dynamic.length; _i < _len; _i++) {
      config = dynamic[_i];
      if (skip-- > 0) {
        continue;
      }
      if (config._nested) {
        injector.loadNested(services, config._nested);
        continue;
      }
      if (config.module.match(/^[A-Z]/)) {
        services.push(injector.findModule(config));
      } else {
        module = require(config.module);
        services.push(module);
      }
    }
    return services;
  },
  loadNested: function(services, config) {
    var defn, existing, name, nextService, rebuild, _arg, _i, _len, _results;
    services.push({});
    _arg = services[services.length - 1];
    _results = [];
    for (name in config) {
      defn = config[name];
      rebuild = [];
      for (_i = 0, _len = services.length; _i < _len; _i++) {
        existing = services[_i];
        rebuild.push(existing);
      }
      rebuild.push({
        module: defn[0]
      });
      injector.loadServices(rebuild, services);
      nextService = services.pop();
      if (defn.length > 1) {
        _results.push(_arg[defn[0]] = nextService[name]);
      } else {
        _results.push(_arg[name] = nextService);
      }
    }
    return _results;
  }
};

module.exports = injector;
